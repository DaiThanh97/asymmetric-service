// source: games/slotsgames/symbol.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.schema.AccumulateMultiplierSlotsGameSymbolModel', null, global);
goog.exportSymbol('proto.schema.AddAccumulateMultiplierSlotsGameSymbolRequest', null, global);
goog.exportSymbol('proto.schema.AddAsymmetricReelsSlotsGameSymbolRequest', null, global);
goog.exportSymbol('proto.schema.AsymmetricReelsSlotsGameSymbolModel', null, global);
goog.exportSymbol('proto.schema.SlotsGameSymbolModel', null, global);
goog.exportSymbol('proto.schema.SlotsGameSymbolModel.SymbolCase', null, global);
goog.exportSymbol('proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest', null, global);
goog.exportSymbol('proto.schema.UpdateAsymmetricReelsSlotsGameSymbolRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.schema.SlotsGameSymbolModel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.schema.SlotsGameSymbolModel.repeatedFields_, proto.schema.SlotsGameSymbolModel.oneofGroups_);
};
goog.inherits(proto.schema.SlotsGameSymbolModel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.schema.SlotsGameSymbolModel.displayName = 'proto.schema.SlotsGameSymbolModel';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.schema.AddAccumulateMultiplierSlotsGameSymbolRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.schema.AddAccumulateMultiplierSlotsGameSymbolRequest.repeatedFields_, null);
};
goog.inherits(proto.schema.AddAccumulateMultiplierSlotsGameSymbolRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.schema.AddAccumulateMultiplierSlotsGameSymbolRequest.displayName = 'proto.schema.AddAccumulateMultiplierSlotsGameSymbolRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest.repeatedFields_, null);
};
goog.inherits(proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest.displayName = 'proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.schema.AccumulateMultiplierSlotsGameSymbolModel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.schema.AccumulateMultiplierSlotsGameSymbolModel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.schema.AccumulateMultiplierSlotsGameSymbolModel.displayName = 'proto.schema.AccumulateMultiplierSlotsGameSymbolModel';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.schema.AddAsymmetricReelsSlotsGameSymbolRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.schema.AddAsymmetricReelsSlotsGameSymbolRequest.repeatedFields_, null);
};
goog.inherits(proto.schema.AddAsymmetricReelsSlotsGameSymbolRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.schema.AddAsymmetricReelsSlotsGameSymbolRequest.displayName = 'proto.schema.AddAsymmetricReelsSlotsGameSymbolRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.schema.UpdateAsymmetricReelsSlotsGameSymbolRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.schema.UpdateAsymmetricReelsSlotsGameSymbolRequest.repeatedFields_, null);
};
goog.inherits(proto.schema.UpdateAsymmetricReelsSlotsGameSymbolRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.schema.UpdateAsymmetricReelsSlotsGameSymbolRequest.displayName = 'proto.schema.UpdateAsymmetricReelsSlotsGameSymbolRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.schema.AsymmetricReelsSlotsGameSymbolModel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.schema.AsymmetricReelsSlotsGameSymbolModel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.schema.AsymmetricReelsSlotsGameSymbolModel.displayName = 'proto.schema.AsymmetricReelsSlotsGameSymbolModel';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.schema.SlotsGameSymbolModel.repeatedFields_ = [8];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.schema.SlotsGameSymbolModel.oneofGroups_ = [[9,10]];

/**
 * @enum {number}
 */
proto.schema.SlotsGameSymbolModel.SymbolCase = {
  SYMBOL_NOT_SET: 0,
  ACCUMULATE_MULTIPLIER_SLOTS_GAME_SYMBOL: 9,
  ASYMMETRIC_REELS_SLOTS_GAME_SYMBOL: 10
};

/**
 * @return {proto.schema.SlotsGameSymbolModel.SymbolCase}
 */
proto.schema.SlotsGameSymbolModel.prototype.getSymbolCase = function() {
  return /** @type {proto.schema.SlotsGameSymbolModel.SymbolCase} */(jspb.Message.computeOneofCase(this, proto.schema.SlotsGameSymbolModel.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.schema.SlotsGameSymbolModel.prototype.toObject = function(opt_includeInstance) {
  return proto.schema.SlotsGameSymbolModel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.schema.SlotsGameSymbolModel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.schema.SlotsGameSymbolModel.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    minimumPaylineToAppear: jspb.Message.getFieldWithDefault(msg, 3, 0),
    chanceRatio: jspb.Message.getFieldWithDefault(msg, 4, 0),
    isWild: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    isJackpot: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    isScatter: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    symbolValuesList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 8)) == null ? undefined : f,
    accumulateMultiplierSlotsGameSymbol: (f = msg.getAccumulateMultiplierSlotsGameSymbol()) && proto.schema.AccumulateMultiplierSlotsGameSymbolModel.toObject(includeInstance, f),
    asymmetricReelsSlotsGameSymbol: (f = msg.getAsymmetricReelsSlotsGameSymbol()) && proto.schema.AsymmetricReelsSlotsGameSymbolModel.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.schema.SlotsGameSymbolModel}
 */
proto.schema.SlotsGameSymbolModel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.schema.SlotsGameSymbolModel;
  return proto.schema.SlotsGameSymbolModel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.schema.SlotsGameSymbolModel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.schema.SlotsGameSymbolModel}
 */
proto.schema.SlotsGameSymbolModel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMinimumPaylineToAppear(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChanceRatio(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsWild(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsJackpot(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsScatter(value);
      break;
    case 8:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedDouble() : [reader.readDouble()]);
      for (var i = 0; i < values.length; i++) {
        msg.addSymbolValues(values[i]);
      }
      break;
    case 9:
      var value = new proto.schema.AccumulateMultiplierSlotsGameSymbolModel;
      reader.readMessage(value,proto.schema.AccumulateMultiplierSlotsGameSymbolModel.deserializeBinaryFromReader);
      msg.setAccumulateMultiplierSlotsGameSymbol(value);
      break;
    case 10:
      var value = new proto.schema.AsymmetricReelsSlotsGameSymbolModel;
      reader.readMessage(value,proto.schema.AsymmetricReelsSlotsGameSymbolModel.deserializeBinaryFromReader);
      msg.setAsymmetricReelsSlotsGameSymbol(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.schema.SlotsGameSymbolModel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.schema.SlotsGameSymbolModel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.schema.SlotsGameSymbolModel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.schema.SlotsGameSymbolModel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMinimumPaylineToAppear();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getChanceRatio();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getIsWild();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getIsJackpot();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getIsScatter();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getSymbolValuesList();
  if (f.length > 0) {
    writer.writePackedDouble(
      8,
      f
    );
  }
  f = message.getAccumulateMultiplierSlotsGameSymbol();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.schema.AccumulateMultiplierSlotsGameSymbolModel.serializeBinaryToWriter
    );
  }
  f = message.getAsymmetricReelsSlotsGameSymbol();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.schema.AsymmetricReelsSlotsGameSymbolModel.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.schema.SlotsGameSymbolModel.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.schema.SlotsGameSymbolModel} returns this
 */
proto.schema.SlotsGameSymbolModel.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.schema.SlotsGameSymbolModel.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.schema.SlotsGameSymbolModel} returns this
 */
proto.schema.SlotsGameSymbolModel.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 minimum_payline_to_appear = 3;
 * @return {number}
 */
proto.schema.SlotsGameSymbolModel.prototype.getMinimumPaylineToAppear = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.schema.SlotsGameSymbolModel} returns this
 */
proto.schema.SlotsGameSymbolModel.prototype.setMinimumPaylineToAppear = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 chance_ratio = 4;
 * @return {number}
 */
proto.schema.SlotsGameSymbolModel.prototype.getChanceRatio = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.schema.SlotsGameSymbolModel} returns this
 */
proto.schema.SlotsGameSymbolModel.prototype.setChanceRatio = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bool is_wild = 5;
 * @return {boolean}
 */
proto.schema.SlotsGameSymbolModel.prototype.getIsWild = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.schema.SlotsGameSymbolModel} returns this
 */
proto.schema.SlotsGameSymbolModel.prototype.setIsWild = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional bool is_jackpot = 6;
 * @return {boolean}
 */
proto.schema.SlotsGameSymbolModel.prototype.getIsJackpot = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.schema.SlotsGameSymbolModel} returns this
 */
proto.schema.SlotsGameSymbolModel.prototype.setIsJackpot = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional bool is_scatter = 7;
 * @return {boolean}
 */
proto.schema.SlotsGameSymbolModel.prototype.getIsScatter = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.schema.SlotsGameSymbolModel} returns this
 */
proto.schema.SlotsGameSymbolModel.prototype.setIsScatter = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * repeated double symbol_values = 8;
 * @return {!Array<number>}
 */
proto.schema.SlotsGameSymbolModel.prototype.getSymbolValuesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 8));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.schema.SlotsGameSymbolModel} returns this
 */
proto.schema.SlotsGameSymbolModel.prototype.setSymbolValuesList = function(value) {
  return jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.schema.SlotsGameSymbolModel} returns this
 */
proto.schema.SlotsGameSymbolModel.prototype.addSymbolValues = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.schema.SlotsGameSymbolModel} returns this
 */
proto.schema.SlotsGameSymbolModel.prototype.clearSymbolValuesList = function() {
  return this.setSymbolValuesList([]);
};


/**
 * optional AccumulateMultiplierSlotsGameSymbolModel accumulate_multiplier_slots_game_symbol = 9;
 * @return {?proto.schema.AccumulateMultiplierSlotsGameSymbolModel}
 */
proto.schema.SlotsGameSymbolModel.prototype.getAccumulateMultiplierSlotsGameSymbol = function() {
  return /** @type{?proto.schema.AccumulateMultiplierSlotsGameSymbolModel} */ (
    jspb.Message.getWrapperField(this, proto.schema.AccumulateMultiplierSlotsGameSymbolModel, 9));
};


/**
 * @param {?proto.schema.AccumulateMultiplierSlotsGameSymbolModel|undefined} value
 * @return {!proto.schema.SlotsGameSymbolModel} returns this
*/
proto.schema.SlotsGameSymbolModel.prototype.setAccumulateMultiplierSlotsGameSymbol = function(value) {
  return jspb.Message.setOneofWrapperField(this, 9, proto.schema.SlotsGameSymbolModel.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.schema.SlotsGameSymbolModel} returns this
 */
proto.schema.SlotsGameSymbolModel.prototype.clearAccumulateMultiplierSlotsGameSymbol = function() {
  return this.setAccumulateMultiplierSlotsGameSymbol(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.schema.SlotsGameSymbolModel.prototype.hasAccumulateMultiplierSlotsGameSymbol = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional AsymmetricReelsSlotsGameSymbolModel asymmetric_reels_slots_game_symbol = 10;
 * @return {?proto.schema.AsymmetricReelsSlotsGameSymbolModel}
 */
proto.schema.SlotsGameSymbolModel.prototype.getAsymmetricReelsSlotsGameSymbol = function() {
  return /** @type{?proto.schema.AsymmetricReelsSlotsGameSymbolModel} */ (
    jspb.Message.getWrapperField(this, proto.schema.AsymmetricReelsSlotsGameSymbolModel, 10));
};


/**
 * @param {?proto.schema.AsymmetricReelsSlotsGameSymbolModel|undefined} value
 * @return {!proto.schema.SlotsGameSymbolModel} returns this
*/
proto.schema.SlotsGameSymbolModel.prototype.setAsymmetricReelsSlotsGameSymbol = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.schema.SlotsGameSymbolModel.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.schema.SlotsGameSymbolModel} returns this
 */
proto.schema.SlotsGameSymbolModel.prototype.clearAsymmetricReelsSlotsGameSymbol = function() {
  return this.setAsymmetricReelsSlotsGameSymbol(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.schema.SlotsGameSymbolModel.prototype.hasAsymmetricReelsSlotsGameSymbol = function() {
  return jspb.Message.getField(this, 10) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.schema.AddAccumulateMultiplierSlotsGameSymbolRequest.repeatedFields_ = [8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.schema.AddAccumulateMultiplierSlotsGameSymbolRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.schema.AddAccumulateMultiplierSlotsGameSymbolRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.schema.AddAccumulateMultiplierSlotsGameSymbolRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.schema.AddAccumulateMultiplierSlotsGameSymbolRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    gameId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    minimumPaylineToAppear: jspb.Message.getFieldWithDefault(msg, 3, 0),
    chanceRatio: jspb.Message.getFieldWithDefault(msg, 4, 0),
    isWild: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    isJackpot: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    isScatter: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    symbolValuesList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 8)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.schema.AddAccumulateMultiplierSlotsGameSymbolRequest}
 */
proto.schema.AddAccumulateMultiplierSlotsGameSymbolRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.schema.AddAccumulateMultiplierSlotsGameSymbolRequest;
  return proto.schema.AddAccumulateMultiplierSlotsGameSymbolRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.schema.AddAccumulateMultiplierSlotsGameSymbolRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.schema.AddAccumulateMultiplierSlotsGameSymbolRequest}
 */
proto.schema.AddAccumulateMultiplierSlotsGameSymbolRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGameId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMinimumPaylineToAppear(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChanceRatio(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsWild(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsJackpot(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsScatter(value);
      break;
    case 8:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedDouble() : [reader.readDouble()]);
      for (var i = 0; i < values.length; i++) {
        msg.addSymbolValues(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.schema.AddAccumulateMultiplierSlotsGameSymbolRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.schema.AddAccumulateMultiplierSlotsGameSymbolRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.schema.AddAccumulateMultiplierSlotsGameSymbolRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.schema.AddAccumulateMultiplierSlotsGameSymbolRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGameId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMinimumPaylineToAppear();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getChanceRatio();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getIsWild();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getIsJackpot();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getIsScatter();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getSymbolValuesList();
  if (f.length > 0) {
    writer.writePackedDouble(
      8,
      f
    );
  }
};


/**
 * optional string game_id = 1;
 * @return {string}
 */
proto.schema.AddAccumulateMultiplierSlotsGameSymbolRequest.prototype.getGameId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.schema.AddAccumulateMultiplierSlotsGameSymbolRequest} returns this
 */
proto.schema.AddAccumulateMultiplierSlotsGameSymbolRequest.prototype.setGameId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.schema.AddAccumulateMultiplierSlotsGameSymbolRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.schema.AddAccumulateMultiplierSlotsGameSymbolRequest} returns this
 */
proto.schema.AddAccumulateMultiplierSlotsGameSymbolRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 minimum_payline_to_appear = 3;
 * @return {number}
 */
proto.schema.AddAccumulateMultiplierSlotsGameSymbolRequest.prototype.getMinimumPaylineToAppear = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.schema.AddAccumulateMultiplierSlotsGameSymbolRequest} returns this
 */
proto.schema.AddAccumulateMultiplierSlotsGameSymbolRequest.prototype.setMinimumPaylineToAppear = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 chance_ratio = 4;
 * @return {number}
 */
proto.schema.AddAccumulateMultiplierSlotsGameSymbolRequest.prototype.getChanceRatio = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.schema.AddAccumulateMultiplierSlotsGameSymbolRequest} returns this
 */
proto.schema.AddAccumulateMultiplierSlotsGameSymbolRequest.prototype.setChanceRatio = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bool is_wild = 5;
 * @return {boolean}
 */
proto.schema.AddAccumulateMultiplierSlotsGameSymbolRequest.prototype.getIsWild = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.schema.AddAccumulateMultiplierSlotsGameSymbolRequest} returns this
 */
proto.schema.AddAccumulateMultiplierSlotsGameSymbolRequest.prototype.setIsWild = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional bool is_jackpot = 6;
 * @return {boolean}
 */
proto.schema.AddAccumulateMultiplierSlotsGameSymbolRequest.prototype.getIsJackpot = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.schema.AddAccumulateMultiplierSlotsGameSymbolRequest} returns this
 */
proto.schema.AddAccumulateMultiplierSlotsGameSymbolRequest.prototype.setIsJackpot = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional bool is_scatter = 7;
 * @return {boolean}
 */
proto.schema.AddAccumulateMultiplierSlotsGameSymbolRequest.prototype.getIsScatter = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.schema.AddAccumulateMultiplierSlotsGameSymbolRequest} returns this
 */
proto.schema.AddAccumulateMultiplierSlotsGameSymbolRequest.prototype.setIsScatter = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * repeated double symbol_values = 8;
 * @return {!Array<number>}
 */
proto.schema.AddAccumulateMultiplierSlotsGameSymbolRequest.prototype.getSymbolValuesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 8));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.schema.AddAccumulateMultiplierSlotsGameSymbolRequest} returns this
 */
proto.schema.AddAccumulateMultiplierSlotsGameSymbolRequest.prototype.setSymbolValuesList = function(value) {
  return jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.schema.AddAccumulateMultiplierSlotsGameSymbolRequest} returns this
 */
proto.schema.AddAccumulateMultiplierSlotsGameSymbolRequest.prototype.addSymbolValues = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.schema.AddAccumulateMultiplierSlotsGameSymbolRequest} returns this
 */
proto.schema.AddAccumulateMultiplierSlotsGameSymbolRequest.prototype.clearSymbolValuesList = function() {
  return this.setSymbolValuesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest.repeatedFields_ = [9];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    gameId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    symbolId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    minimumPaylineToAppear: jspb.Message.getFieldWithDefault(msg, 4, 0),
    chanceRatio: jspb.Message.getFieldWithDefault(msg, 5, 0),
    isWild: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    isJackpot: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    isScatter: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    symbolValuesList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 9)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest}
 */
proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest;
  return proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest}
 */
proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGameId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbolId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMinimumPaylineToAppear(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChanceRatio(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsWild(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsJackpot(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsScatter(value);
      break;
    case 9:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedDouble() : [reader.readDouble()]);
      for (var i = 0; i < values.length; i++) {
        msg.addSymbolValues(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGameId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSymbolId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMinimumPaylineToAppear();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getChanceRatio();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getIsWild();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getIsJackpot();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getIsScatter();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getSymbolValuesList();
  if (f.length > 0) {
    writer.writePackedDouble(
      9,
      f
    );
  }
};


/**
 * optional string game_id = 1;
 * @return {string}
 */
proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest.prototype.getGameId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest} returns this
 */
proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest.prototype.setGameId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string symbol_id = 2;
 * @return {string}
 */
proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest.prototype.getSymbolId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest} returns this
 */
proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest.prototype.setSymbolId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest} returns this
 */
proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 minimum_payline_to_appear = 4;
 * @return {number}
 */
proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest.prototype.getMinimumPaylineToAppear = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest} returns this
 */
proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest.prototype.setMinimumPaylineToAppear = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 chance_ratio = 5;
 * @return {number}
 */
proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest.prototype.getChanceRatio = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest} returns this
 */
proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest.prototype.setChanceRatio = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional bool is_wild = 6;
 * @return {boolean}
 */
proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest.prototype.getIsWild = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest} returns this
 */
proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest.prototype.setIsWild = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional bool is_jackpot = 7;
 * @return {boolean}
 */
proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest.prototype.getIsJackpot = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest} returns this
 */
proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest.prototype.setIsJackpot = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional bool is_scatter = 8;
 * @return {boolean}
 */
proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest.prototype.getIsScatter = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest} returns this
 */
proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest.prototype.setIsScatter = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * repeated double symbol_values = 9;
 * @return {!Array<number>}
 */
proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest.prototype.getSymbolValuesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 9));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest} returns this
 */
proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest.prototype.setSymbolValuesList = function(value) {
  return jspb.Message.setField(this, 9, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest} returns this
 */
proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest.prototype.addSymbolValues = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 9, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest} returns this
 */
proto.schema.UpdateAccumulateMultiplierSlotsGameSymbolRequest.prototype.clearSymbolValuesList = function() {
  return this.setSymbolValuesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.schema.AccumulateMultiplierSlotsGameSymbolModel.prototype.toObject = function(opt_includeInstance) {
  return proto.schema.AccumulateMultiplierSlotsGameSymbolModel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.schema.AccumulateMultiplierSlotsGameSymbolModel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.schema.AccumulateMultiplierSlotsGameSymbolModel.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.schema.AccumulateMultiplierSlotsGameSymbolModel}
 */
proto.schema.AccumulateMultiplierSlotsGameSymbolModel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.schema.AccumulateMultiplierSlotsGameSymbolModel;
  return proto.schema.AccumulateMultiplierSlotsGameSymbolModel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.schema.AccumulateMultiplierSlotsGameSymbolModel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.schema.AccumulateMultiplierSlotsGameSymbolModel}
 */
proto.schema.AccumulateMultiplierSlotsGameSymbolModel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.schema.AccumulateMultiplierSlotsGameSymbolModel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.schema.AccumulateMultiplierSlotsGameSymbolModel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.schema.AccumulateMultiplierSlotsGameSymbolModel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.schema.AccumulateMultiplierSlotsGameSymbolModel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.schema.AddAsymmetricReelsSlotsGameSymbolRequest.repeatedFields_ = [8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.schema.AddAsymmetricReelsSlotsGameSymbolRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.schema.AddAsymmetricReelsSlotsGameSymbolRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.schema.AddAsymmetricReelsSlotsGameSymbolRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.schema.AddAsymmetricReelsSlotsGameSymbolRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    gameId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    minimumPaylineToAppear: jspb.Message.getFieldWithDefault(msg, 3, 0),
    chanceRatio: jspb.Message.getFieldWithDefault(msg, 4, 0),
    isWild: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    isJackpot: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    isScatter: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    symbolValuesList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 8)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.schema.AddAsymmetricReelsSlotsGameSymbolRequest}
 */
proto.schema.AddAsymmetricReelsSlotsGameSymbolRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.schema.AddAsymmetricReelsSlotsGameSymbolRequest;
  return proto.schema.AddAsymmetricReelsSlotsGameSymbolRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.schema.AddAsymmetricReelsSlotsGameSymbolRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.schema.AddAsymmetricReelsSlotsGameSymbolRequest}
 */
proto.schema.AddAsymmetricReelsSlotsGameSymbolRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGameId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMinimumPaylineToAppear(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChanceRatio(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsWild(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsJackpot(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsScatter(value);
      break;
    case 8:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedDouble() : [reader.readDouble()]);
      for (var i = 0; i < values.length; i++) {
        msg.addSymbolValues(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.schema.AddAsymmetricReelsSlotsGameSymbolRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.schema.AddAsymmetricReelsSlotsGameSymbolRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.schema.AddAsymmetricReelsSlotsGameSymbolRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.schema.AddAsymmetricReelsSlotsGameSymbolRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGameId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMinimumPaylineToAppear();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getChanceRatio();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getIsWild();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getIsJackpot();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getIsScatter();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getSymbolValuesList();
  if (f.length > 0) {
    writer.writePackedDouble(
      8,
      f
    );
  }
};


/**
 * optional string game_id = 1;
 * @return {string}
 */
proto.schema.AddAsymmetricReelsSlotsGameSymbolRequest.prototype.getGameId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.schema.AddAsymmetricReelsSlotsGameSymbolRequest} returns this
 */
proto.schema.AddAsymmetricReelsSlotsGameSymbolRequest.prototype.setGameId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.schema.AddAsymmetricReelsSlotsGameSymbolRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.schema.AddAsymmetricReelsSlotsGameSymbolRequest} returns this
 */
proto.schema.AddAsymmetricReelsSlotsGameSymbolRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 minimum_payline_to_appear = 3;
 * @return {number}
 */
proto.schema.AddAsymmetricReelsSlotsGameSymbolRequest.prototype.getMinimumPaylineToAppear = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.schema.AddAsymmetricReelsSlotsGameSymbolRequest} returns this
 */
proto.schema.AddAsymmetricReelsSlotsGameSymbolRequest.prototype.setMinimumPaylineToAppear = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 chance_ratio = 4;
 * @return {number}
 */
proto.schema.AddAsymmetricReelsSlotsGameSymbolRequest.prototype.getChanceRatio = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.schema.AddAsymmetricReelsSlotsGameSymbolRequest} returns this
 */
proto.schema.AddAsymmetricReelsSlotsGameSymbolRequest.prototype.setChanceRatio = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bool is_wild = 5;
 * @return {boolean}
 */
proto.schema.AddAsymmetricReelsSlotsGameSymbolRequest.prototype.getIsWild = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.schema.AddAsymmetricReelsSlotsGameSymbolRequest} returns this
 */
proto.schema.AddAsymmetricReelsSlotsGameSymbolRequest.prototype.setIsWild = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional bool is_jackpot = 6;
 * @return {boolean}
 */
proto.schema.AddAsymmetricReelsSlotsGameSymbolRequest.prototype.getIsJackpot = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.schema.AddAsymmetricReelsSlotsGameSymbolRequest} returns this
 */
proto.schema.AddAsymmetricReelsSlotsGameSymbolRequest.prototype.setIsJackpot = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional bool is_scatter = 7;
 * @return {boolean}
 */
proto.schema.AddAsymmetricReelsSlotsGameSymbolRequest.prototype.getIsScatter = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.schema.AddAsymmetricReelsSlotsGameSymbolRequest} returns this
 */
proto.schema.AddAsymmetricReelsSlotsGameSymbolRequest.prototype.setIsScatter = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * repeated double symbol_values = 8;
 * @return {!Array<number>}
 */
proto.schema.AddAsymmetricReelsSlotsGameSymbolRequest.prototype.getSymbolValuesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 8));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.schema.AddAsymmetricReelsSlotsGameSymbolRequest} returns this
 */
proto.schema.AddAsymmetricReelsSlotsGameSymbolRequest.prototype.setSymbolValuesList = function(value) {
  return jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.schema.AddAsymmetricReelsSlotsGameSymbolRequest} returns this
 */
proto.schema.AddAsymmetricReelsSlotsGameSymbolRequest.prototype.addSymbolValues = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.schema.AddAsymmetricReelsSlotsGameSymbolRequest} returns this
 */
proto.schema.AddAsymmetricReelsSlotsGameSymbolRequest.prototype.clearSymbolValuesList = function() {
  return this.setSymbolValuesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.schema.UpdateAsymmetricReelsSlotsGameSymbolRequest.repeatedFields_ = [9];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.schema.UpdateAsymmetricReelsSlotsGameSymbolRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.schema.UpdateAsymmetricReelsSlotsGameSymbolRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.schema.UpdateAsymmetricReelsSlotsGameSymbolRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.schema.UpdateAsymmetricReelsSlotsGameSymbolRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    gameId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    symbolId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    minimumPaylineToAppear: jspb.Message.getFieldWithDefault(msg, 4, 0),
    chanceRatio: jspb.Message.getFieldWithDefault(msg, 5, 0),
    isWild: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    isJackpot: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    isScatter: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    symbolValuesList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 9)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.schema.UpdateAsymmetricReelsSlotsGameSymbolRequest}
 */
proto.schema.UpdateAsymmetricReelsSlotsGameSymbolRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.schema.UpdateAsymmetricReelsSlotsGameSymbolRequest;
  return proto.schema.UpdateAsymmetricReelsSlotsGameSymbolRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.schema.UpdateAsymmetricReelsSlotsGameSymbolRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.schema.UpdateAsymmetricReelsSlotsGameSymbolRequest}
 */
proto.schema.UpdateAsymmetricReelsSlotsGameSymbolRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGameId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbolId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMinimumPaylineToAppear(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChanceRatio(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsWild(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsJackpot(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsScatter(value);
      break;
    case 9:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedDouble() : [reader.readDouble()]);
      for (var i = 0; i < values.length; i++) {
        msg.addSymbolValues(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.schema.UpdateAsymmetricReelsSlotsGameSymbolRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.schema.UpdateAsymmetricReelsSlotsGameSymbolRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.schema.UpdateAsymmetricReelsSlotsGameSymbolRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.schema.UpdateAsymmetricReelsSlotsGameSymbolRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGameId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSymbolId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMinimumPaylineToAppear();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getChanceRatio();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getIsWild();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getIsJackpot();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getIsScatter();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getSymbolValuesList();
  if (f.length > 0) {
    writer.writePackedDouble(
      9,
      f
    );
  }
};


/**
 * optional string game_id = 1;
 * @return {string}
 */
proto.schema.UpdateAsymmetricReelsSlotsGameSymbolRequest.prototype.getGameId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.schema.UpdateAsymmetricReelsSlotsGameSymbolRequest} returns this
 */
proto.schema.UpdateAsymmetricReelsSlotsGameSymbolRequest.prototype.setGameId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string symbol_id = 2;
 * @return {string}
 */
proto.schema.UpdateAsymmetricReelsSlotsGameSymbolRequest.prototype.getSymbolId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.schema.UpdateAsymmetricReelsSlotsGameSymbolRequest} returns this
 */
proto.schema.UpdateAsymmetricReelsSlotsGameSymbolRequest.prototype.setSymbolId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.schema.UpdateAsymmetricReelsSlotsGameSymbolRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.schema.UpdateAsymmetricReelsSlotsGameSymbolRequest} returns this
 */
proto.schema.UpdateAsymmetricReelsSlotsGameSymbolRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 minimum_payline_to_appear = 4;
 * @return {number}
 */
proto.schema.UpdateAsymmetricReelsSlotsGameSymbolRequest.prototype.getMinimumPaylineToAppear = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.schema.UpdateAsymmetricReelsSlotsGameSymbolRequest} returns this
 */
proto.schema.UpdateAsymmetricReelsSlotsGameSymbolRequest.prototype.setMinimumPaylineToAppear = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 chance_ratio = 5;
 * @return {number}
 */
proto.schema.UpdateAsymmetricReelsSlotsGameSymbolRequest.prototype.getChanceRatio = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.schema.UpdateAsymmetricReelsSlotsGameSymbolRequest} returns this
 */
proto.schema.UpdateAsymmetricReelsSlotsGameSymbolRequest.prototype.setChanceRatio = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional bool is_wild = 6;
 * @return {boolean}
 */
proto.schema.UpdateAsymmetricReelsSlotsGameSymbolRequest.prototype.getIsWild = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.schema.UpdateAsymmetricReelsSlotsGameSymbolRequest} returns this
 */
proto.schema.UpdateAsymmetricReelsSlotsGameSymbolRequest.prototype.setIsWild = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional bool is_jackpot = 7;
 * @return {boolean}
 */
proto.schema.UpdateAsymmetricReelsSlotsGameSymbolRequest.prototype.getIsJackpot = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.schema.UpdateAsymmetricReelsSlotsGameSymbolRequest} returns this
 */
proto.schema.UpdateAsymmetricReelsSlotsGameSymbolRequest.prototype.setIsJackpot = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional bool is_scatter = 8;
 * @return {boolean}
 */
proto.schema.UpdateAsymmetricReelsSlotsGameSymbolRequest.prototype.getIsScatter = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.schema.UpdateAsymmetricReelsSlotsGameSymbolRequest} returns this
 */
proto.schema.UpdateAsymmetricReelsSlotsGameSymbolRequest.prototype.setIsScatter = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * repeated double symbol_values = 9;
 * @return {!Array<number>}
 */
proto.schema.UpdateAsymmetricReelsSlotsGameSymbolRequest.prototype.getSymbolValuesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 9));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.schema.UpdateAsymmetricReelsSlotsGameSymbolRequest} returns this
 */
proto.schema.UpdateAsymmetricReelsSlotsGameSymbolRequest.prototype.setSymbolValuesList = function(value) {
  return jspb.Message.setField(this, 9, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.schema.UpdateAsymmetricReelsSlotsGameSymbolRequest} returns this
 */
proto.schema.UpdateAsymmetricReelsSlotsGameSymbolRequest.prototype.addSymbolValues = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 9, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.schema.UpdateAsymmetricReelsSlotsGameSymbolRequest} returns this
 */
proto.schema.UpdateAsymmetricReelsSlotsGameSymbolRequest.prototype.clearSymbolValuesList = function() {
  return this.setSymbolValuesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.schema.AsymmetricReelsSlotsGameSymbolModel.prototype.toObject = function(opt_includeInstance) {
  return proto.schema.AsymmetricReelsSlotsGameSymbolModel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.schema.AsymmetricReelsSlotsGameSymbolModel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.schema.AsymmetricReelsSlotsGameSymbolModel.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.schema.AsymmetricReelsSlotsGameSymbolModel}
 */
proto.schema.AsymmetricReelsSlotsGameSymbolModel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.schema.AsymmetricReelsSlotsGameSymbolModel;
  return proto.schema.AsymmetricReelsSlotsGameSymbolModel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.schema.AsymmetricReelsSlotsGameSymbolModel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.schema.AsymmetricReelsSlotsGameSymbolModel}
 */
proto.schema.AsymmetricReelsSlotsGameSymbolModel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.schema.AsymmetricReelsSlotsGameSymbolModel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.schema.AsymmetricReelsSlotsGameSymbolModel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.schema.AsymmetricReelsSlotsGameSymbolModel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.schema.AsymmetricReelsSlotsGameSymbolModel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


goog.object.extend(exports, proto.schema);
